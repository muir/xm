// Code generated by "enumer -type=SpanKindEnum -linecomment -json -sql"; DO NOT EDIT.

package xopconst

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SpanKindEnumName = "UNSPECIFIEDINTERNALSERVERCLIENTPRODUCERCONSUMER"

var _SpanKindEnumIndex = [...]uint8{0, 11, 19, 25, 31, 39, 47}

const _SpanKindEnumLowerName = "unspecifiedinternalserverclientproducerconsumer"

func (i SpanKindEnum) String() string {
	if i < 0 || i >= SpanKindEnum(len(_SpanKindEnumIndex)-1) {
		return fmt.Sprintf("SpanKindEnum(%d)", i)
	}
	return _SpanKindEnumName[_SpanKindEnumIndex[i]:_SpanKindEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SpanKindEnumNoOp() {
	var x [1]struct{}
	_ = x[SpanKindUnspecified-(0)]
	_ = x[SpanKindInternal-(1)]
	_ = x[SpanKindServer-(2)]
	_ = x[SpanKindClient-(3)]
	_ = x[SpanKindProducer-(4)]
	_ = x[SpanKindConsumer-(5)]
}

var _SpanKindEnumValues = []SpanKindEnum{SpanKindUnspecified, SpanKindInternal, SpanKindServer, SpanKindClient, SpanKindProducer, SpanKindConsumer}

var _SpanKindEnumNameToValueMap = map[string]SpanKindEnum{
	_SpanKindEnumName[0:11]:       SpanKindUnspecified,
	_SpanKindEnumLowerName[0:11]:  SpanKindUnspecified,
	_SpanKindEnumName[11:19]:      SpanKindInternal,
	_SpanKindEnumLowerName[11:19]: SpanKindInternal,
	_SpanKindEnumName[19:25]:      SpanKindServer,
	_SpanKindEnumLowerName[19:25]: SpanKindServer,
	_SpanKindEnumName[25:31]:      SpanKindClient,
	_SpanKindEnumLowerName[25:31]: SpanKindClient,
	_SpanKindEnumName[31:39]:      SpanKindProducer,
	_SpanKindEnumLowerName[31:39]: SpanKindProducer,
	_SpanKindEnumName[39:47]:      SpanKindConsumer,
	_SpanKindEnumLowerName[39:47]: SpanKindConsumer,
}

var _SpanKindEnumNames = []string{
	_SpanKindEnumName[0:11],
	_SpanKindEnumName[11:19],
	_SpanKindEnumName[19:25],
	_SpanKindEnumName[25:31],
	_SpanKindEnumName[31:39],
	_SpanKindEnumName[39:47],
}

// SpanKindEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SpanKindEnumString(s string) (SpanKindEnum, error) {
	if val, ok := _SpanKindEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SpanKindEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SpanKindEnum values", s)
}

// SpanKindEnumValues returns all values of the enum
func SpanKindEnumValues() []SpanKindEnum {
	return _SpanKindEnumValues
}

// SpanKindEnumStrings returns a slice of all String values of the enum
func SpanKindEnumStrings() []string {
	strs := make([]string, len(_SpanKindEnumNames))
	copy(strs, _SpanKindEnumNames)
	return strs
}

// IsASpanKindEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SpanKindEnum) IsASpanKindEnum() bool {
	for _, v := range _SpanKindEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SpanKindEnum
func (i SpanKindEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SpanKindEnum
func (i *SpanKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SpanKindEnum should be a string, got %s", data)
	}

	var err error
	*i, err = SpanKindEnumString(s)
	return err
}

func (i SpanKindEnum) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SpanKindEnum) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SpanKindEnum: %[1]T(%[1]v)", value)
	}

	val, err := SpanKindEnumString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
