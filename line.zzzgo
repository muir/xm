package xop

import (
	"github.com/muir/xop-go/xopat"
	"github.com/muir/xop-go/xopbase"

	"github.com/mohae/deepcopy"
)

// AnyImmutable can be used to log something that is not going to be further modified
// after this call.
func (line *Line) AnyImmutable(k string, v interface{}) *Line {
	if line.skip {
		return line
	}
	if line.log.settings.redactAny != nil {
		line.log.settings.redactAny(line.line, k, v, true)
		return line
	}
	line.line.Any(k, v)
	return line
}

// AnyWithoutRedaction
func (line *Line) AnyWithoutRedaction(k string, v interface{}) *Line {
	line.line.Any(k, v)
	return line
}

// Any can be used to log something that might be modified after this call.  If any base
// logger does not immediately serialize, then the object will be copied using
// https://github.com/mohae/deepcopy 's Copy().
func (line *Line) Any(k string, v interface{}) *Line {
	if line.skip {
		return line
	}
	if line.log.settings.redactAny != nil {
		line.log.settings.redactAny(line.line, k, v, !line.log.span.referencesKept)
		return line
	}
	if line.log.span.referencesKept {
		// TODO: make copy function configurable
		v = deepcopy.Copy(v)
	}
	line.line.Any(k, v)
	return line
}

func (line *Line) Float32(k string, v float32) *Line {
	line.line.Float64(k, float64(v), xopbase.Float32DataType)
	return line
}

func (line *Line) EmbeddedEnum(k xopat.EmbeddedEnum) *Line {
	return line.Enum(k.EnumAttribute(), k)
}
func (line *Line) Enum(k *xopat.EnumAttribute, v xopat.Enum) *Line {
	line.line.Enum(k, v)
	return line
}

func (line *Line) Error(k string, v error) *Line {
	if line.skip {
		return line
	}
	if line.log.settings.redactError != nil {
		line.log.settings.redactError(line.line, k, v)
		return line
	}
	line.line.String(k, v.Error(), xopbase.ErrorDataType)
	return line
}

func (line *Line) Stringer(k string, v fmt.Stringer) *Line {
	if line.skip {
		return line
	}
	if line.log.settings.redactString != nil {
		line.log.settings.redactString(line.line, k, v.String())
		return line
	}
	line.line.String(k, v.String(), xopbase.StringerDataType)
	return line
}

func (line *Line) String(k string, v string) *Line {
	if line.skip {
		return line
	}
	if line.log.settings.redactString != nil {
		line.log.settings.redactString(line.line, k, v)
		return line
	}
	line.line.String(k, v, xopbase.StringDataType)
	return line
}

// MACRO BaseDataWithoutType SKIP:Any
func (line *Line) ZZZ(k string, v zzz) *Line { line.line.ZZZ(k, v); return line }

// MACRO BaseDataWithType SKIP:String
func (line *Line) ZZZ(k string, v zzz) *Line {
	line.line.ZZZ(k, v, xopbase.ZZZDataType)
	return line
}

// MACRO Ints SKIP:Int64
func (line *Line) ZZZ(k string, v zzz) *Line {
	line.line.Int64(k, int64(v), xopbase.ZZZDataType)
	return line
}

// MACRO Uints SKIP:Uint64
func (line *Line) ZZZ(k string, v zzz) *Line {
	line.line.Uint64(k, uint64(v), xopbase.ZZZDataType)
	return line
}
