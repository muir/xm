package xoptrace

import (
	"bytes"
	"crypto/rand"
	"encoding/hex"
)

// MACRO HexBytes
type ZZZ struct {
	b [zzz]byte
	h [zzz * 2]byte
}

// MACRO HexBytes
type WrappedZZZ struct {
	*ZZZ
	offset int
	trace  *Trace
}

// MACRO HexBytes
var zeroHexZZZ = bytes.Repeat([]byte{'0'}, zzz*2)

// MACRO HexBytes
func newZZZ() ZZZ {
	var x ZZZ
	copy(x.h[:], zeroHexZZZ)
	return x
}

// MACRO HexBytes
func NewZZZFromSlice(b []byte) ZZZ {
	var x ZZZ
	setBytes(x.b[:], b)
	hex.Encode(x.h[:], x.b[:])
	return x
}

// MACRO HexBytes
var zeroZZZb = [zzz]byte{}

// MACRO HexBytes
func (x ZZZ) IsZero() bool     { return x.b == zeroZZZb }
func (x ZZZ) Bytes() []byte    { return x.b[:] }
func (x ZZZ) HexBytes() []byte { return x.h[:] }
func (x ZZZ) String() string   { return string(x.h[:]) }

// MACRO HexBytes
func (x WrappedZZZ) String() string {
	return x.trace.headerString[x.offset : x.offset+zzz*2]
}

// MACRO HexBytes
func (x WrappedZZZ) SetBytes(b []byte) {
	setBytes(x.b[:], b)
	hex.Encode(x.h[:], x.b[:])
	x.trace.rebuild()
}

// MACRO HexBytes
func (x WrappedZZZ) SetArray(b [zzz]byte) {
	x.b = b
	hex.Encode(x.h[:], x.b[:])
	x.trace.rebuild()
}

// MACRO HexBytes
// Array returns the underlying byte array.  Do not modify it!
func (x *ZZZ) Array() [zzz]byte {
	return x.b
}

// MACRO HexBytes
func (x WrappedZZZ) SetString(s string) {
	setBytesFromString(x.b[:], s)
	hex.Encode(x.h[:], x.b[:])
	x.trace.rebuild()
}

// MACRO HexBytes
func (x WrappedZZZ) SetZero() {
	x.b = [zzz]byte{}
	hex.Encode(x.h[:], x.b[:])
	x.trace.rebuild()
}

// MACRO HexBytes
func (x WrappedZZZ) SetRandom() {
	x.ZZZ.setRandom()
	x.trace.rebuild()
}

// MACRO HexBytes
func (x WrappedZZZ) Set(b ZZZ) {
	*x.ZZZ = b
	x.trace.rebuild()
}

// MACRO HexBytes
func (x *ZZZ) setRandom() {
	for {
		_, _ = rand.Read(x.b[:])
		if x.b != zeroZZZb {
			break
		}
	}
	hex.Encode(x.h[:], x.b[:])
}

// MACRO HexBytes
func (x *ZZZ) initialize() {
	hex.Encode(x.h[:], x.b[:])
}

// MACRO HexBytes
func (x ZZZ) initialized(t Trace) ZZZ {
	if !t.initialized {
		hex.Encode(x.h[:], x.b[:])
	}
	return x
}
