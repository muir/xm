package xopotel

import (
	"context"
	"encoding/json"
	"fmt"
	"regexp"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/xoplog/xop-go"
	"github.com/xoplog/xop-go/trace"
	"github.com/xoplog/xop-go/xopbase"
	"github.com/xoplog/xop-go/xopnum"
	"github.com/xoplog/xop-go/xoputil"

	"github.com/google/uuid"
	"go.opentelemetry.io/otel/attribute"
	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
	oteltrace "go.opentelemetry.io/otel/trace"
)

// SpanLog allows xop to add logs to an existing OTEL span.  log.Done() will be
// ignored for this span.
func SpanLog(ctx context.Context, name string, extraModifiers ...xop.SeedModifier) *xop.Log {
	span := oteltrace.SpanFromContext(ctx)
	var xoptrace trace.Trace
	xoptrace.TraceID().Set(span.SpanContext().TraceID())
	xoptrace.SpanID().Set(span.SpanContext().SpanID())
	xoptrace.Flags().Set([1]byte{byte(span.SpanContext().TraceFlags())})
	xoptrace.Version().Set([1]byte{1})
	log := xop.NewSeed(
		xop.CombineSeedModifiers(extraModifiers...),
		xop.WithContext(ctx),
		xop.WithTrace(xoptrace),
		xop.WithBase(&logger{
			id:         "otel-" + uuid.New().String(),
			doLogging:  true,
			ignoreDone: span,
			tracer:     span.TracerProvider().Tracer(""),
		}),
		// The first time through, we do not want to change the spanID,
		// but on subsequent calls, we do so the outer reactive function
		// just sets the future function.
		xop.WithReactive(func(ctx context.Context, seed xop.Seed, nameOrDescription string, isChildSpan bool) []xop.SeedModifier {
			return []xop.SeedModifier{
				xop.WithTrace(xoptrace),
				xop.WithReactiveReplaced(
					func(ctx context.Context, seed xop.Seed, nameOrDescription string, isChildSpan bool) []xop.SeedModifier {
						var newSpan oteltrace.Span
						if isChildSpan {
							ctx, newSpan = span.TracerProvider().Tracer("").Start(ctx, nameOrDescription, oteltrace.WithSpanKind(oteltrace.SpanKindInternal))
						} else {
							ctx, newSpan = span.TracerProvider().Tracer("").Start(ctx, nameOrDescription)
						}
						return []xop.SeedModifier{
							xop.WithContext(ctx),
							xop.WithSpan(newSpan.SpanContext().SpanID()),
						}
					}),
			}
		}),
	).SubSpan(name)
	go func() {
		<-ctx.Done()
		log.Done()
	}()
	return log
}

// BaseLogger provides SeedModifiers to set up an OTEL Tracer as a xopbase.Logger
// so that xop logs are output through the OTEL Tracer.
func BaseLogger(ctx context.Context, tracer oteltrace.Tracer, doLogging bool) xop.SeedModifier {
	return xop.CombineSeedModifiers(
		xop.WithBase(&logger{
			id:        "otel-" + uuid.New().String(),
			doLogging: doLogging,
			tracer:    tracer,
		}),
		xop.WithContext(ctx),
		xop.WithReactive(func(ctx context.Context, seed xop.Seed, nameOrDescription string, isChildSpan bool) []xop.SeedModifier {
			if isChildSpan {
				ctx, span := tracer.Start(ctx, nameOrDescription, oteltrace.WithSpanKind(oteltrace.SpanKindInternal))
				return []xop.SeedModifier{
					xop.WithContext(ctx),
					xop.WithSpan(span.SpanContext().SpanID()),
				}
			}
			ctx, span := tracer.Start(ctx, nameOrDescription, oteltrace.WithNewRoot())
			bundle := seed.Bundle()
			if bundle.ParentTrace.IsZero() {
				bundle.State.SetString(span.SpanContext().TraceState().String())
				bundle.Trace.Flags().Set([1]byte{byte(span.SpanContext().TraceFlags())})
				bundle.Trace.Version().Set([1]byte{1})
				bundle.Trace.TraceID().Set(span.SpanContext().TraceID())
			}
			bundle.Trace.SpanID().Set(span.SpanContext().SpanID())
			return []xop.SeedModifier{
				xop.WithContext(ctx),
				xop.WithBundle(bundle),
			}
		}),
	)
}

func (logger *logger) ID() string           { return logger.id }
func (logger *logger) ReferencesKept() bool { return true }
func (logger *logger) Buffered() bool       { return false }

func (logger *logger) Request(ctx context.Context, ts time.Time, _ trace.Bundle, description string) xopbase.Request {
	return logger.span(ctx, ts, description, "")
}

func (span *span) Flush()                         {}
func (span *span) Final()                         {}
func (span *span) SetErrorReporter(f func(error)) {}
func (span *span) Boring(_ bool)                  {}
func (span *span) ID() string                     { return span.logger.id }
func (span *span) Done(endTime time.Time, final bool) {
	if !final {
		return
	}
	if span.logger.ignoreDone == span.span {
		// skip Done for spans passed in to SpanLog()
		return
	}
	span.span.End()
}

func (span *span) Span(ctx context.Context, ts time.Time, bundle trace.Bundle, description string, spanSequenceCode string) xopbase.Span {
	return span.logger.span(ctx, ts, description, spanSequenceCode)
}

func (logger *logger) span(ctx context.Context, ts time.Time, description string, spanSequence string) xopbase.Request {
	otelspan := oteltrace.SpanFromContext(ctx)
	if spanSequence != "" {
		otelspan.SetAttributes(logSpanSequence.String(spanSequence))
	}
	return &span{
		logger: logger,
		span:   otelspan,
		ctx:    ctx,
	}
}

func (span *span) NoPrefill() xopbase.Prefilled {
	return &prefilled{
		builder: builder{
			span: span,
		},
	}
}

func (span *span) StartPrefill() xopbase.Prefilling {
	return &prefilling{
		builder: builder{
			span: span,
		},
	}
}

func (prefill *prefilling) PrefillComplete(msg string) xopbase.Prefilled {
	prefill.builder.prefillMsg = msg
	return &prefilled{
		builder: prefill.builder,
	}
}

func (prefilled *prefilled) Line(level xopnum.Level, _ time.Time, pc []uintptr) xopbase.Line {
	if !prefilled.span.logger.doLogging || !prefilled.span.span.IsRecording() {
		return xoputil.SkipLine
	}
	// PERFORMANCE: get line from a pool
	line := &line{}
	line.level = level
	line.span = prefilled.span
	line.attributes = line.prealloc[:0]
	line.attributes = append(line.attributes, prefilled.span.spanPrefill...)
	line.attributes = append(line.attributes, prefilled.attributes...)
	line.prefillMsg = prefilled.prefillMsg
	line.linkKey = prefilled.linkKey
	line.linkValue = prefilled.linkValue
	if len(pc) > 0 {
		var b strings.Builder
		frames := runtime.CallersFrames(pc)
		for {
			frame, more := frames.Next()
			if strings.Contains(frame.File, "runtime/") {
				break
			}
			b.WriteString(frame.File)
			b.WriteByte(':')
			b.WriteString(strconv.Itoa(frame.Line))
			b.WriteByte('\n')
			if !more {
				break
			}
		}
		line.attributes = append(line.attributes, semconv.ExceptionStacktraceKey.String(b.String()))
	}
	return line
}

func (line *line) Static(msg string) { line.Msg(msg) }

func (line *line) Msg(msg string) {
	line.attributes = append(line.attributes, logMessageKey.String(line.prefillMsg+msg))
	if line.linkKey == "" {
		line.span.span.AddEvent(line.level.String(), oteltrace.WithAttributes(line.attributes...))
		return
		// PERFORMANCE: return line to pool
	}
	_, tmpSpan := line.span.logger.tracer.Start(line.span.ctx, line.linkKey, oteltrace.WithLinks(
		oteltrace.Link{
			SpanContext: oteltrace.NewSpanContext(oteltrace.SpanContextConfig{
				TraceID:    line.linkValue.TraceID().Array(),
				SpanID:     line.linkValue.SpanID().Array(),
				TraceFlags: oteltrace.TraceFlags(line.linkValue.Flags().Array()[0]),
				TraceState: emptyTraceState, // TODO: is this right?
				Remote:     true,            // information not available
			}),
		},
	))
	tmpSpan.AddEvent(line.level.String(), oteltrace.WithAttributes(line.attributes...))
	tmpSpan.SetAttributes(spanIsLinkEventKey.Bool(true))
	tmpSpan.End()
}

var templateRE = regexp.MustCompile(`\{.+?\}`)

func (line *line) Template(template string) {
	kv := make(map[string]int)
	for i, a := range line.attributes {
		kv[string(a.Key)] = i
	}
	msg := templateRE.ReplaceAllStringFunc(template, func(k string) string {
		k = k[1 : len(k)-1]
		if i, ok := kv[k]; ok {
			a := line.attributes[i]
			switch a.Value.Type() {
			case attribute.BOOL:
				return strconv.FormatBool(a.Value.AsBool())
			case attribute.INT64:
				return strconv.FormatInt(a.Value.AsInt64(), 10)
			case attribute.FLOAT64:
				return strconv.FormatFloat(a.Value.AsFloat64(), 'g', -1, 64)
			case attribute.STRING:
				return a.Value.AsString()
			case attribute.BOOLSLICE:
				return fmt.Sprint(a.Value.AsBoolSlice())
			case attribute.INT64SLICE:
				return fmt.Sprint(a.Value.AsInt64Slice())
			case attribute.FLOAT64SLICE:
				return fmt.Sprint(a.Value.AsFloat64Slice())
			case attribute.STRINGSLICE:
				return fmt.Sprint(a.Value.AsStringSlice())
			default:
				return "{" + k + "}"
			}
		}
		return "''"
	})
	line.Msg(msg)
}

func (builder *builder) Enum(k *xopat.EnumAttribute, v xopat.Enum) {
	builder.attributes = append(builder.attributes, attribute.Stringer(k.Key(), v))
}

func (builder *builder) Any(k string, v interface{}) {
	switch typed := v.(type) {
	// MACRO OTELAttributes
	case zzz:
		builder.attributes = append(builder.attributes, attribute.ZZZ(k, typed))

	default:
		enc, err := json.Marshal(v)
		if err != nil {
			builder.attributes = append(builder.attributes, attribute.String(k+"-error", err.Error()))
		} else {
			builder.attributes = append(builder.attributes, attribute.String(k, string(enc)))
		}
	}
}

func (builder *builder) Time(k string, v time.Time) {
	builder.attributes = append(builder.attributes, attribute.String(k, v.Format(time.RFC3339Nano)))
}

func (builder *builder) Duration(k string, v time.Duration) {
	builder.attributes = append(builder.attributes, attribute.Stringer(k, v))
}

func (span *span) MetadataLink(k *xopat.LinkAttribute, v trace.Trace) {
	_, tmpSpan := span.logger.tracer.Start(span.ctx, k.Key(), oteltrace.WithLinks(
		oteltrace.Link{
			SpanContext: oteltrace.NewSpanContext(oteltrace.SpanContextConfig{
				TraceID:    v.TraceID().Array(),
				SpanID:     v.SpanID().Array(),
				TraceFlags: oteltrace.TraceFlags(v.Flags().Array()[0]),
				TraceState: emptyTraceState, // TODO: is this right?
				Remote:     true,            // information not available
			}),
		},
	))
	tmpSpan.SetAttributes(spanIsLinkAttributeKey.Bool(true))
	tmpSpan.End()
}

func (builder *builder) Uint64(k string, v uint64, dt xopbase.DataType) {
	if dt == xopbase.Uint64DataType {
		builder.attributes = append(builder.attributes, attribute.String(k, strconv.FormatUint(v, 10)))
	} else {
		builder.attributes = append(builder.attributes, attribute.Int64(k, int64(v)))
	}
}

func (builder *builder) Link(k string, v trace.Trace) {
	if builder.linkKey == "" {
		builder.linkKey = k
		builder.linkValue = v
		return
	}
	builder.attributes = append(builder.attributes, attribute.StringSlice(k,
		[]string{"link", v.TraceID().String(), v.SpanID().String()}))
}

func (builder *builder) Bool(k string, v bool) {
	builder.attributes = append(builder.attributes, attribute.Bool(k, v))
}

// MACRO BaseData ONLY:String,Int64,Float64
func (builder *builder) ZZZ(k string, v zzz, _ xopbase.DataType) {
	builder.attributes = append(builder.attributes, attribute.ZZZ(k, v))
}

//MACRO BaseAttribute SKIP:Link
func (span *span) MetadataZZZ(k *xopat.ZZZAttribute, v zzz) {
	key := k.Key()
	//CONDITIONAL ONLY:Enum
	value := v.String()
	//CONDITIONAL ONLY:Time
	value := v.Format(time.RFC3339Nano)
	//CONDITIONAL ONLY:Duration
	value := int64(v)
	//CONDITIONAL ONLY:Any
	enc, err := json.Marshal(v)
	var value string
	if err != nil {
		value = fmt.Sprintf("[zopotel] could not marshal %T value: %s", v, err)
	} else {
		value = string(enc)
	}
	//CONDITIONAL ONLY:Int64,String,Float64,Bool
	value := v
	//END CONDITIONAL
	if !k.Multiple() {
		if k.Locked() {
			span.lock.Lock()
			defer span.lock.Unlock()
			if span.hasPrior == nil {
				span.hasPrior = make(map[string]struct{})
			}
			if _, ok := span.hasPrior[key]; ok {
				return
			}
			span.hasPrior[key] = struct{}{}
		}
		//CONDITIONAL ONLY:Enum,Time,String,Any
		span.span.SetAttributes(attribute.String(key, value))
		//ELSE CONDITIONAL
		span.span.SetAttributes(attribute.ZZZ(key, value))
		//END CONDITIONAL
		return
	}
	span.lock.Lock()
	defer span.lock.Unlock()
	if k.Distinct() {
		if span.metadataSeen == nil {
			span.metadataSeen = make(map[string]interface{})
		}
		seenRaw, ok := span.metadataSeen[key]
		if !ok {
			//CONDITIONAL ONLY:Enum,Time,String,Any
			seen := make(map[string]struct{})
			//ELSE CONDITIONAL
			seen := make(map[zzz]struct{})
			//END CONDITIONAL
			span.metadataSeen[key] = seen
			seen[value] = struct{}{}
		} else {
			//CONDITIONAL ONLY:Enum,Time,String,Any
			seen := seenRaw.(map[string]struct{})
			//ELSE CONDITIONAL
			seen := seenRaw.(map[zzz]struct{})
			//END CONDITIONAL
			if _, ok := seen[value]; ok {
				return
			}
			seen[value] = struct{}{}
		}
	}
	//CONDITIONAL ONLY:Enum,Time,String,Any
	if span.priorStringSlices == nil {
		span.priorStringSlices = make(map[string][]string)
	}
	s := span.priorStringSlices[key]
	s = append(s, value)
	span.priorStringSlices[key] = s
	span.span.SetAttributes(attribute.StringSlice(key, s))
	//ELSE CONDITIONAL
	if span.priorZZZSlices == nil {
		span.priorZZZSlices = make(map[string][]zzz)
	}
	s := span.priorZZZSlices[key]
	s = append(s, value)
	span.priorZZZSlices[key] = s
	span.span.SetAttributes(attribute.ZZZSlice(key, s))
	//END CONDITIONAL
}
